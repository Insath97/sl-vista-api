const { DataTypes, Model } = require("sequelize");
const { sequelize } = require("../config/database");

class MerchantProfile extends Model {
  static associate(models) {
    this.belongsTo(models.User, {
      foreignKey: "userId",
      as: "user",
      onDelete: "CASCADE",
    });
    
    // Relationship with properties/offerings
    this.hasMany(models.Property, {
      foreignKey: "merchantId",
      as: "properties",
    });
    
    this.hasMany(models.Activity, {
      foreignKey: "merchantId",
      as: "activities",
    });
  }

  toJSON() {
    const values = { ...super.toJSON() };
    // Remove sensitive fields from JSON output
    delete values.bankAccountNumber;
    delete values.taxId;
    return values;
  }
}

MerchantProfile.init(
  {
    id: {
      type: DataTypes.INTEGER,
      autoIncrement: true,
      primaryKey: true,
    },
    userId: {
      type: DataTypes.INTEGER,
      allowNull: false,
      unique: true,
      references: {
        model: "users",
        key: "id",
      },
    },
    businessName: {
      type: DataTypes.STRING(100),
      allowNull: false,
      validate: {
        notEmpty: true,
        len: [2, 100],
      },
    },
    businessRegistrationNumber: {
      type: DataTypes.STRING(50),
      allowNull: false,
      unique: true,
      validate: {
        notEmpty: true,
      },
    },
    businessType: {
      type: DataTypes.ENUM(
        "hotel",
        "homestay",
        "tour_operator",
        "transport",
        "activity_provider",
        "restaurant",
        "other"
      ),
      allowNull: false,
    },
    contactPerson: {
      type: DataTypes.STRING(100),
      allowNull: false,
      validate: {
        notEmpty: true,
        len: [2, 100],
      },
    },
    contactEmail: {
      type: DataTypes.STRING,
      allowNull: false,
      validate: {
        isEmail: true,
        notEmpty: true,
      },
    },
    contactPhone: {
      type: DataTypes.STRING(20),
      allowNull: false,
      validate: {
        is: /^\+?[\d\s-]+$/,
        notEmpty: true,
      },
    },
    businessAddress: {
      type: DataTypes.TEXT,
      allowNull: false,
      validate: {
        notEmpty: true,
      },
    },
    businessDescription: {
      type: DataTypes.TEXT,
      allowNull: true,
    },
    bankAccountNumber: {
      type: DataTypes.STRING(30),
      allowNull: true, // Can be added later
      validate: {
        is: /^[A-Z0-9]+$/i,
      },
    },
    bankName: {
      type: DataTypes.STRING(50),
      allowNull: true,
    },
    taxId: {
      type: DataTypes.STRING(30),
      allowNull: true,
    },
    isVerified: {
      type: DataTypes.BOOLEAN,
      defaultValue: false,
    },
    verificationDocuments: {
      type: DataTypes.JSON, // Stores array of document URLs
      allowNull: true,
    },
    commissionRate: {
      type: DataTypes.FLOAT,
      defaultValue: 15.0, // Default commission percentage
      validate: {
        min: 0,
        max: 100,
      },
    },
    isActive: {
      type: DataTypes.BOOLEAN,
      defaultValue: true,
    },
    deletedAt: {
      type: DataTypes.DATE,
      allowNull: true,
    },
  },
  {
    sequelize,
    modelName: "MerchantProfile",
    tableName: "merchant_profiles",
    timestamps: true,
    paranoid: true,
    indexes: [
      {
        unique: true,
        fields: ["userId"],
      },
      {
        unique: true,
        fields: ["businessRegistrationNumber"],
      },
      {
        fields: ["businessType"],
      },
      {
        fields: ["isVerified"],
      },
    ],
    hooks: {
      beforeCreate: (merchant) => {
        if (merchant.businessName && !merchant.businessDescription) {
          merchant.businessDescription = `Experience the best ${merchant.businessType.replace(/_/g, " ")} services with ${merchant.businessName}`;
        }
      },
    },
  }
);

module.exports = MerchantProfile;


Property Posting Limits: 

javascript
// Example middleware to check before property creation
async function checkPropertyLimit(req, res, next) {
  const merchant = await MerchantProfile.findByPk(req.user.id);
  const propertyCount = await Property.count({
    where: { merchantId: req.user.id }
  });
  
  if (propertyCount >= merchant.maxPropertiesAllowed) {
    return res.status(403).json({
      success: false,
      message: `You can only post ${merchant.maxPropertiesAllowed} property(s) in your current status`
    });
  }
  next();
}

Usage Examples:

javascript
// Admin approving a merchant
await merchant.update({
  status: "active",
  maxPropertiesAllowed: 10
});

// Admin suspending a merchant
await merchant.update({
  status: "suspended",
  suspensionReason: "Multiple policy violations",
  maxPropertiesAllowed: 0
});

// Checking property creation eligibility
router.post("/properties", 
  authMiddleware,
  checkPropertyLimit, 
  propertyController.createProperty
);